# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/FacultadInformatica-LinkedData/Curso2023-2024-DataScience/blob/master/Assignment4/course_materials/notebooks/Task07.ipynb

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
ns = Namespace("http://somewhere#")
for s,p,o in g.triples((None, RDFS.subClassOf, ns.LivingThing)):
  print(s)
# Visualize the results

from rdflib.plugins.sparql import prepareQuery
q1=prepareQuery('''
SELECT ?subject
where{
?subject rdfs:subClassOf ns:LivingThing.
}
''',
    initNs={"rdfs":RDFS, "ns":ns}
)
for r in g.query(q1):
  print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
for s,p,o in g.triples((None, RDF.type, ns.Person)):
  print(s)

for s1,p1,o1 in g.triples((None, RDFS.subClassOf, ns.Person)):
  subclass=s1
  for s2,p2,o2 in g.triples((None, RDF.type, subclass)):
      print(s2)

print("\n")

q2=prepareQuery('''
SELECT ?subject
where{
?subject rdf:type ns:Person.

}
''',
    initNs={"rdf":RDF, "ns":ns}
)

q3=prepareQuery('''
SELECT ?subject
where{
?subclass rdfs:subClassOf ns:Person.
?subject rdf:type ?subclass.

}
''',
    initNs={"rdf":RDF,"rdfs":RDFS, "ns":ns}
)

for r in g.query(q2):
  print(r)

for l in g.query(q3):
  print(l)

# Visualize the results

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

# TO DO
for s,p,o in g.triples((None, RDF.type, ns.Person)):
  print(s,p,o)



for s1,p1,o1 in g.triples((None, RDF.type, ns.Animal)):
  subject=s1
  for s2,p2,o2 in g.triples((subject, None, None)):
    print(s2,p2,o2)

print("\n")

# SPARQL
q4=prepareQuery('''
SELECT ?subject
where{
  ?subject rdf:type ns:Person.
}
''',
    initNs={"rdf":RDF, "ns":ns}
)

q5=prepareQuery('''
SELECT ?subject ?properties ?value
where{
  ?subject rdf:type ns:Animal.
  ?subject ?properties ?value
}
''',
    initNs={"rdf":RDF,"rdfs":RDFS, "ns":ns}
)


for m in g.query(q4):
  print(m)

for n in g.query(q5):
  print(n)

# Visualize the results

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

# TO DO
FOAF = Namespace("http://xmlns.com/foaf/0.1/")

for s,p,o in g.triples((None, FOAF.knows, ns.RockySmith)):
  print(s)
# Visualize the results

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

# TO DO
from typing import Dict
diccionario:Dict[str, int]={}
for s,p,o in g.triples((None, FOAF.knows, None)):
  if s in diccionario:
    diccionario[s] +=1
  else:
    diccionario[s]=1
for nombre in diccionario:
  if diccionario[nombre]>=2:
    resultado=nombre
    print(resultado)

# Visualize the results